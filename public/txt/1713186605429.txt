from tkinter import *
from tkinter import messagebox
from tkinter import filedialog

class Application:
    root = Tk()
    root.title('Текстовый редактор')
    root.geometry('600x700')

    view_colors = {
        'dark': {
            'text_bg': 'black', 'text_fg': 'white', 'cursor': 'red', 'select_bg': 'red'
        },
        'light': {
            'text_bg': 'white', 'text_fg': 'black', 'cursor': 'red', 'select_bg': 'red'
        }
    }

    f_text = Frame(root)
    f_text.pack(fill=BOTH, expand=1)

    text_field = Text(f_text,
                      bg='white',
                      fg='black',
                      padx=10,
                      pady=10,
                      wrap=WORD,
                      insertbackground='red',
                      selectbackground='red',
                      spacing3=10,
                      width=30,
                      font='Arial 14 bold'
                      )
    text_field.pack(expand=1, fill=BOTH, side=LEFT)

    def change_theme(self, theme):
        self.text_field['bg'] = self.view_colors[theme]['text_bg']
        self.text_field['fg'] = self.view_colors[theme]['text_fg']
        self.text_field['insertbackground'] = self.view_colors[theme]['cursor']
        self.text_field['selectbackground'] = self.view_colors[theme]['select_bg']

    def new_file(self):
        self.text_field.delete('1.0', END)

    def notepad_exit(self):
        answer = messagebox.askokcancel('Выход', 'Вы точно хотите выйти?')
        if answer:
            self.root.destroy()

    def open_file(self):
        file_path = filedialog.askopenfilename(title='Выбор файла', filetypes=(
        ('Текстовые документы (*.txt)', '*.txt'), ('Все файлы', '*.*')))
        if file_path:
            self.text_field.delete('1.0', END)
            self.text_field.insert('1.0', open(file_path, encoding='utf-8').read())

    def save_file(self):
        file_path = filedialog.asksaveasfilename(
            filetypes=(('Текстовые документы (*.txt)', '*.txt'), ('Все файлы', '*.*')))
        f = open(file_path, 'w', encoding='utf-8')
        text = self.text_field.get('1.0', END)
        f.write(text)
        f.close()

    def search_modal(self):
        top = Toplevel(self.root)
        top.title('Поиск')
        top.geometry('300x200')
        label_search = Label(top, text='Искать слово', font=('Aerial', 12))
        label_search.pack(pady=4)
        entry_search = Entry(top, font=('Aerial', 12))
        entry_search.pack(pady=4)
        label_search = Label(top, text='Заменить слово', font=('Aerial', 12))
        label_search.pack(pady=4)
        entry_replace = Entry(top, font=('Aerial', 12))
        entry_replace.pack(pady=4)
        button_search = Button(top, text='Найти', command=lambda: self.search(entry_search.get()))
        button_search.pack(pady=4)
        button_replace = Button(top, text='Заменить', command=lambda: self.replace(entry_search.get(), entry_replace.get()))
        button_replace.pack(pady=4)
        top.transient(self.root)
        top.grab_set()
        top.focus_set()
        top.wait_window()

    def search(self, word):
        text = self.text_field.get('1.0', END)
        counter = 0
        wordCount = 0
        for i in text:
            if counter == len(word) - 1:
                wordCount += 1
                counter = 0
            if i == word[counter]:
                counter += 1
            else:
                counter = 0
        top = Toplevel(self.root)
        top.title('Поиск')
        top.geometry('300x200')
        label_search = Label(top, text='слово ' + word + ' найдено ' + str(wordCount) + ' раз', font=('Aerial', 12))
        label_search.pack(pady=4)

    def replace(self, word, replacement):
        text = self.text_field.get('1.0', END)
        self.text_field.delete("1.0", "end")
        self.text_field.insert("end", text.replace(word, replacement))
        top = Toplevel(self.root)
        top.title('Поиск')
        top.geometry('300x100')
        label_search = Label(top, text='слово ' + word + ' заменено ' + str(text.count(word)) + ' раз', font=('Aerial', 12))
        label_search.pack(pady=4)
        top.transient(self.root)
        top.grab_set()
        top.focus_set()
        top.wait_window()

    def run(self):
        main_menu = Menu(self.root)

        file_menu = Menu(main_menu, tearoff=0)
        file_menu.add_command(label='Новый', command=self.new_file)
        file_menu.add_command(label='Открыть', command=self.open_file)
        file_menu.add_command(label='Сохранить', command=self.save_file)
        file_menu.add_separator()
        file_menu.add_command(label='Закрыть', command=self.notepad_exit)
        self.root.config(menu=file_menu)

        view_menu = Menu(main_menu, tearoff=0)
        view_menu_sub = Menu(view_menu, tearoff=0)
        view_menu_sub.add_command(label='Тёмная', command=lambda: self.change_theme('dark'))
        view_menu_sub.add_command(label='Светлая', command=lambda: self.change_theme('light'))
        view_menu.add_cascade(label='Тема', menu=view_menu_sub)
        self.root.config(menu=view_menu)

        main_menu.add_cascade(label='Файл', menu=file_menu)
        main_menu.add_cascade(label='Схема', menu=view_menu)
        main_menu.add_command(label='Поиск', command=lambda: self.search_modal())
        self.root.config(menu=main_menu)

        self.text_field.pack(expand=1, fill=BOTH, side=LEFT)

        scroll = Scrollbar(self.f_text, command=self.text_field.yview)
        scroll.pack(side=LEFT, fill=Y)
        self.text_field.config(yscrollcommand=scroll.set)

        self.root.mainloop()

app = Application()
app.run()